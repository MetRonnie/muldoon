name: Publish release

on: # merge release PR (effectively)
  push:
    branches: [master]
    paths: ['hammond.txt']

env:
  # Best not to include the GH token here, only do it for the steps that need it
  REPOSITORY: ${{ github.repository }}

jobs:
  create-release-pr:
    # if: github.event
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - run: echo '${{ toJson(github.event) }}'
    # - name: Checkout repo
    #   uses: actions/checkout@v2.3.1

    # - name: Sanitise version input
    #   shell: node {0}
    #   env:
    #     VERSION: ${{ github.event.inputs.version }}
    #   run: | # TODO: check it matches the x.y.z pattern?
    #     const versionStr = process.env.VERSION.trim();
    #     console.log(`::set-env name=VERSION::${versionStr}`);

    # - name: Configure git
    #   run: |
    #     git config --global user.name "github-actions[bot]"
    #     git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

    #     BRANCH_NAME="prepare-${VERSION}"
    #     git checkout -b "$BRANCH_NAME"

    #     echo "::set-env name=BRANCH_NAME::$BRANCH_NAME"

    # - name: Commit & push
    #   id: push
    #   run: |
    #     echo "Find Nedry! Check the vending machines!" > hammond.txt
    #     git add hammond.txt
    #     git commit -m "Create hammond.txt"
    #     git push origin "$BRANCH_NAME"

    # - name: Create a Release
    #   uses: actions/create-release@v1
    #   with:
    #     tag_name:


    # - name: On fail - delete branch on origin (if it was pushed)
    #   if: steps.create-pr.outcome != 'success' && steps.push.outcome == 'success'
    #   run: |
    #     backup_sha=$( git rev-parse "origin/${BRANCH_NAME}" )
    #     git push -d origin "$BRANCH_NAME"
    #     echo "::warning :: Deleted the newly-pushed branch '${BRANCH_NAME}' because the workflow failed"
    #     echo "If you need to recover the branch:"
    #     echo "  git fetch origin ${backup_sha}"
    #     echo "  git checkout -b ${BRANCH_NAME} ${backup_sha}"
